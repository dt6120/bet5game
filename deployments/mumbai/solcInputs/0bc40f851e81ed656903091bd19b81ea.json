{
  "language": "Solidity",
  "sources": {
    "contracts/Bet5Game.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\";\n\n/**\n    @title A betting game for users to predict top performing crypto tokens and win pool rewards\n  */\ncontract Bet5Game is Ownable, ReentrancyGuard, KeeperCompatibleInterface {\n    uint16 private constant DENOMINATOR = 10000;\n    uint8 public constant WINNER_COUNT = 3;\n    uint8 public constant MIN_ENTRY_COUNT = 6;\n    uint8 public constant MAX_ENTRY_COUNT = 30;\n    uint8 public constant NUM_USER_SELECTION = 5;\n    uint16 public constant FEE = 500;\n\n    uint256 public POOL_ENTRY_INTERVAL = 30 minutes;\n    uint256 public POOL_START_INTERVAL = 60 minutes;\n    uint256 public POOL_DURATION = 60 minutes;\n\n    // --------------------- TEST FUNCTIONS --------------------\n\n    function setPoolEntryInterval(uint256 _poolEntryInterval)\n        external\n        onlyOwner\n    {\n        POOL_ENTRY_INTERVAL = _poolEntryInterval;\n    }\n\n    function setPoolStartInterval(uint256 _poolStartInterval)\n        external\n        onlyOwner\n    {\n        POOL_START_INTERVAL = _poolStartInterval;\n    }\n\n    function setPoolDuration(uint256 _poolDuration) external onlyOwner {\n        POOL_DURATION = _poolDuration;\n    }\n\n    enum Status {\n        ACTIVE,\n        CANCELLED,\n        COMPLETE\n    }\n\n    struct Pool {\n        uint256 startTime;\n        uint256 endTime;\n        uint256 entryFee;\n        address token;\n        address[] entries;\n        address[WINNER_COUNT] winners;\n        Status status;\n    }\n\n    struct UserEntry {\n        address[NUM_USER_SELECTION] tokens;\n        int256[NUM_USER_SELECTION] prices;\n    }\n\n    uint256 public poolCounter;\n    uint256 public keeperPoolCounter;\n\n    mapping(address => uint256) public feeCollected;\n    mapping(address => uint256) public poolsEntered;\n    mapping(uint256 => Pool) public pools;\n    mapping(uint256 => mapping(address => UserEntry)) internal userPoolEntries;\n\n    event PoolCreated(\n        uint256 indexed poolId,\n        uint256 indexed startTime,\n        uint256 endTime,\n        address indexed token,\n        uint256 entryFee\n    );\n    event PoolEntered(\n        uint256 indexed poolId,\n        address indexed user,\n        address[NUM_USER_SELECTION] tokens,\n        int256[NUM_USER_SELECTION] prices,\n        bool newEntry\n    );\n    event PoolCancelled(uint256 indexed poolId);\n    event PoolRewardTransfer(\n        uint256 indexed poolId,\n        uint256 indexed amount,\n        address indexed winner\n    );\n    event FeeWithdrawn(address indexed token, uint256 indexed amount);\n\n    constructor() {\n        keeperPoolCounter = 1;\n    }\n\n    /**\n        @notice Create a new pool for users to enter and select tokens\n        @param _entryFee amount of accepted tokens to be deposited by user to enter pool\n        @param _token accepted token of the pool in terms of which the entry fee is based\n     */\n    function createPool(uint256 _entryFee, address _token) external onlyOwner {\n        require(_entryFee > 0, \"Increase entry fee\");\n        require(\n            bytes(ERC20(_token).name()).length > 0,\n            \"Invalid token address\"\n        );\n\n        uint256 poolId = ++poolCounter;\n        pools[poolId].startTime = block.timestamp + POOL_START_INTERVAL;\n        pools[poolId].endTime =\n            block.timestamp +\n            POOL_START_INTERVAL +\n            POOL_DURATION;\n        pools[poolId].entryFee = _entryFee;\n        pools[poolId].token = _token;\n        pools[poolId].status = Status.ACTIVE;\n\n        emit PoolCreated(\n            poolId,\n            pools[poolId].startTime,\n            pools[poolId].endTime,\n            _token,\n            _entryFee\n        );\n    }\n\n    /**\n        @notice Adds user to list of pool entries, collects entry fee, and stores the current token prices\n        @param _poolId Unique ID of the pool to enter\n        @param _tokens List of token aggregator addresses\n     */\n    function enterPool(\n        uint256 _poolId,\n        address[NUM_USER_SELECTION] memory _tokens\n    ) external nonReentrant {\n        Pool storage pool = pools[_poolId];\n\n        require(\n            block.timestamp >= pool.startTime - POOL_ENTRY_INTERVAL,\n            \"Pool entry not started\"\n        );\n        require(pool.startTime > block.timestamp, \"Pool entry time over\");\n        require(\n            _tokens.length == NUM_USER_SELECTION,\n            \"Invalid token selection\"\n        );\n        require(pool.entries.length < MAX_ENTRY_COUNT, \"Pool limit reached\");\n\n        bool newEntry = userPoolEntries[_poolId][msg.sender].tokens[0] ==\n            address(0);\n        userPoolEntries[_poolId][msg.sender].tokens = _tokens;\n        poolsEntered[msg.sender] += 1;\n\n        for (uint8 i = 0; i < NUM_USER_SELECTION; i++) {\n            AggregatorV3Interface aggregator = AggregatorV3Interface(\n                _tokens[i]\n            );\n            (, int256 price, , , ) = aggregator.latestRoundData();\n            require(price > 0, \"Token price feed not found\");\n            userPoolEntries[_poolId][msg.sender].prices[i] = price;\n        }\n\n        if (newEntry) {\n            pool.entries.push(msg.sender);\n\n            ERC20(pool.token).transferFrom(\n                msg.sender,\n                address(this),\n                pool.entryFee\n            );\n        }\n\n        emit PoolEntered(\n            _poolId,\n            msg.sender,\n            _tokens,\n            userPoolEntries[_poolId][msg.sender].prices,\n            newEntry\n        );\n    }\n\n    /**\n        @notice Disbales additional entries and returns the deposited tokens of users if number of entries is less than `MIN_ENTRY_COUNT`\n        @param _poolId Unique ID of the pool to cancel\n     */\n    function cancelPool(uint256 _poolId) public {\n        Pool storage pool = pools[_poolId];\n\n        require(pool.endTime > pool.startTime, \"Pool already cancelled\");\n        require(block.timestamp > pool.startTime, \"Pool not started\");\n        require(\n            pool.entries.length < MIN_ENTRY_COUNT,\n            \"Entry count exceeds cancel limit\"\n        );\n\n        pool.endTime = pool.startTime;\n        pool.status = Status.CANCELLED;\n\n        for (uint8 i = 0; i < pool.entries.length; i++) {\n            poolsEntered[pool.entries[i]] -= 1;\n            ERC20(pool.token).transfer(pool.entries[i], pool.entryFee);\n        }\n\n        emit PoolCancelled(_poolId);\n    }\n\n    /**\n        @notice Distributes pool rewards to winners based on gains of token selection\n        @param _poolId Unique ID of the pool to distribute rewards to winners\n     */\n    function distributeRewards(uint256 _poolId) public nonReentrant {\n        Pool storage pool = pools[_poolId];\n\n        require(block.timestamp >= pool.endTime, \"Pool in progress\");\n        require(pool.winners[0] == address(0), \"Rewards already distributed\");\n\n        (address[WINNER_COUNT] memory winners, ) = leaderboard(_poolId);\n\n        pool.status = Status.COMPLETE;\n        pool.winners = winners;\n\n        uint256 fee = (pool.entries.length * pool.entryFee * FEE) / DENOMINATOR;\n        feeCollected[pool.token] += fee;\n        uint256 rewards = pool.entries.length * pool.entryFee - fee;\n\n        for (uint8 i = 0; i < WINNER_COUNT; i++) {\n            address winner = winners[i];\n\n            // hard coded, will have to be modified if `WINNER_COUNT` is changed\n\n            uint256 amount = (rewards * (WINNER_COUNT - i)) / 6;\n            ERC20(pool.token).transfer(winner, amount);\n\n            emit PoolRewardTransfer(_poolId, amount, winner);\n        }\n    }\n\n    /**\n        @notice Transfers the collected fee of the provided token to owner address\n        @param _token Address of token to withdraw collected fee\n    */\n    function withdrawFees(address _token) external nonReentrant onlyOwner {\n        require(feeCollected[_token] > 0, \"No fee to collect\");\n\n        uint256 amount = feeCollected[_token];\n        delete feeCollected[_token];\n\n        ERC20(_token).transfer(msg.sender, amount);\n\n        emit FeeWithdrawn(_token, amount);\n    }\n\n    /**\n        @notice Keeper function to automatically cancel pool or distribute pool rewards\n     */\n    function performUpkeep(\n        bytes calldata /* performData */\n    ) external override {\n        Pool memory pool = pools[keeperPoolCounter];\n        if (\n            block.timestamp >= pool.startTime &&\n            pool.entries.length < MIN_ENTRY_COUNT\n        ) {\n            cancelPool(keeperPoolCounter++);\n        } else if (block.timestamp > pool.endTime) {\n            distributeRewards(keeperPoolCounter++);\n        }\n    }\n\n    // --------------------- VIEW FUNCTIONS ---------------------\n\n    /**\n        @notice Keeper function to check if any pool needs to be cancelled or to distribute rewards\n     */\n    function checkUpkeep(\n        bytes calldata /* checkData */\n    ) external override returns (bool upkeepNeeded, bytes memory) {\n        Pool memory pool = pools[keeperPoolCounter];\n\n        // pool should exist (invalid case)\n        // by start time it does not have enough entries (cancel case)\n        // crosses end time (reward winners case)\n        upkeepNeeded =\n            keeperPoolCounter <= poolCounter &&\n            ((block.timestamp >= pool.startTime &&\n                pool.entries.length < MIN_ENTRY_COUNT) ||\n                block.timestamp > pool.endTime);\n    }\n\n    /**\n        @param _poolId Unique ID of the pool\n        @param _address User address of which points are to be calculated\n        @return Number of points till current time based upon their pool token selection\n     */\n    function getNetPoints(uint256 _poolId, address _address)\n        public\n        view\n        returns (int256)\n    {\n        require(pools[_poolId].status == Status.ACTIVE, \"Pool not active\");\n\n        int256 netPoints = 0;\n\n        for (uint8 i = 0; i < NUM_USER_SELECTION; i++) {\n            AggregatorV3Interface aggregator = AggregatorV3Interface(\n                userPoolEntries[_poolId][_address].tokens[i]\n            );\n            (, int256 price, , , ) = aggregator.latestRoundData();\n            netPoints +=\n                ((price - userPoolEntries[_poolId][_address].prices[i]) *\n                    int256(uint256(DENOMINATOR))) /\n                userPoolEntries[_poolId][_address].prices[i];\n        }\n\n        return netPoints / int256(uint256(NUM_USER_SELECTION));\n    }\n\n    /**\n        @notice Calculates the position of a user in a pool based upon the gains of their selected tokens\n        @param _poolId Unique ID of the pool\n        @param _address User address of which position and points are to be calculated\n        @return Position and net points of the user among all the pool entries\n     */\n    function getPoolPosition(uint256 _poolId, address _address)\n        external\n        view\n        returns (uint256, int256)\n    {\n        require(block.timestamp > pools[_poolId].startTime, \"Pool not started\");\n        require(block.timestamp <= pools[_poolId].endTime, \"Pool has ended\");\n\n        address[] memory entries = pools[_poolId].entries;\n        int256 netPoints = getNetPoints(_poolId, _address);\n        uint256 count = 1;\n        uint256 userIndex = entries.length;\n\n        for (uint256 i = 0; i < entries.length; i++) {\n            address user = entries[i];\n            if (user == _address) {\n                userIndex = i;\n            }\n            if (netPoints < getNetPoints(_poolId, user)) {\n                count++;\n            } else if (\n                netPoints == getNetPoints(_poolId, user) && userIndex > i\n            ) {\n                count++;\n            }\n        }\n\n        return (count, netPoints);\n    }\n\n    /**\n        @param _poolId Unique ID of the pool\n        @return List of addresses of users that entered the pool\n     */\n    function getPoolEntries(uint256 _poolId)\n        external\n        view\n        returns (address[] memory)\n    {\n        return pools[_poolId].entries;\n    }\n\n    /**\n        @param _poolId Unique ID of the pool\n        @return List of winners after pool has ended\n    */\n    function getPoolWinners(uint256 _poolId)\n        external\n        view\n        returns (address[WINNER_COUNT] memory)\n    {\n        require(pools[_poolId].status == Status.COMPLETE, \"Pool has not ended\");\n\n        return pools[_poolId].winners;\n    }\n\n    /**\n        @param _poolId Unique ID of the pool\n        @param _address User address of which pool entries are required\n        @return UserEntry struct which has list of tokens and their initial prices\n     */\n    function getUserPoolEntries(uint256 _poolId, address _address)\n        external\n        view\n        returns (UserEntry memory)\n    {\n        return userPoolEntries[_poolId][_address];\n    }\n\n    /**\n        @param _poolId Unique ID of the pool\n        @return List of top `WINNER_COUNT` users and their respective points in descending order of points\n     */\n    function leaderboard(uint256 _poolId)\n        public\n        view\n        returns (address[WINNER_COUNT] memory, int256[WINNER_COUNT] memory)\n    {\n        Pool memory pool = pools[_poolId];\n\n        require(pool.entries.length >= MIN_ENTRY_COUNT, \"Add more entries\");\n        require(pool.status == Status.ACTIVE, \"Pool not active\");\n\n        address[WINNER_COUNT] memory winners;\n        int256[WINNER_COUNT] memory netPoints;\n\n        for (uint8 i = 0; i < pool.entries.length; i++) {\n            int256 points = getNetPoints(_poolId, pool.entries[i]);\n\n            // hard coded, will have to be modified if `WINNER_COUNT` is changed\n\n            if (points > netPoints[0] || winners[0] == address(0)) {\n                winners[2] = winners[1];\n                winners[1] = winners[0];\n                winners[0] = pool.entries[i];\n\n                netPoints[2] = netPoints[1];\n                netPoints[1] = netPoints[0];\n                netPoints[0] = points;\n            } else if (points > netPoints[1] || winners[1] == address(0)) {\n                winners[2] = winners[1];\n                winners[1] = pool.entries[i];\n\n                netPoints[2] = netPoints[1];\n                netPoints[1] = points;\n            } else if (points > netPoints[2] || winners[2] == address(0)) {\n                winners[2] = pool.entries[i];\n\n                netPoints[2] = points;\n            }\n        }\n\n        return (winners, netPoints);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n\n  function decimals()\n    external\n    view\n    returns (\n      uint8\n    );\n\n  function description()\n    external\n    view\n    returns (\n      string memory\n    );\n\n  function version()\n    external\n    view\n    returns (\n      uint256\n    );\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(\n    uint80 _roundId\n  )\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface KeeperCompatibleInterface {\n\n  /**\n   * @notice checks if the contract requires work to be done.\n   * @param checkData data passed to the contract when checking for upkeep.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with,\n   * if upkeep is needed.\n   */\n  function checkUpkeep(\n    bytes calldata checkData\n  )\n    external\n    returns (\n      bool upkeepNeeded,\n      bytes memory performData\n    );\n\n  /**\n   * @notice Performs work on the contract. Executed by the keepers, via the registry.\n   * @param performData is the data which was passed back from the checkData\n   * simulation.\n   */\n  function performUpkeep(\n    bytes calldata performData\n  ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/Token.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract Token is ERC20 {\n    uint256 private constant TOTAL_SUPPLY = 10**9 * 10**18; // 1 Billion tokens\n\n    constructor(string memory _name, string memory _symbol)\n        ERC20(_name, _symbol)\n    {\n        _mint(msg.sender, TOTAL_SUPPLY);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}