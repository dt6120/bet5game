{
  "address": "0x028a96397B3cD8e205aF2aa44C420CC2B75725e9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "PoolCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entryFee",
          "type": "uint256"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[5]",
          "name": "tokens",
          "type": "address[5]"
        },
        {
          "indexed": false,
          "internalType": "int256[5]",
          "name": "prices",
          "type": "int256[5]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newEntry",
          "type": "bool"
        }
      ],
      "name": "PoolEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "PoolRewardTransfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_ENTRY_COUNT",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_ENTRY_COUNT",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NUM_USER_SELECTION",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL_ENTRY_INTERVAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL_START_INTERVAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WINNER_COUNT",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "cancelPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_entryFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "distributeRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address[5]",
          "name": "_tokens",
          "type": "address[5]"
        }
      ],
      "name": "enterPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "feeCollected",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getNetPoints",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "getPoolEntries",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getPoolPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "getPoolWinners",
      "outputs": [
        {
          "internalType": "address[3]",
          "name": "",
          "type": "address[3]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getUserPoolEntries",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[5]",
              "name": "tokens",
              "type": "address[5]"
            },
            {
              "internalType": "int256[5]",
              "name": "prices",
              "type": "int256[5]"
            }
          ],
          "internalType": "struct Bet5Game.UserEntry",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keeperPoolCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "leaderboard",
      "outputs": [
        {
          "internalType": "address[3]",
          "name": "",
          "type": "address[3]"
        },
        {
          "internalType": "int256[3]",
          "name": "",
          "type": "int256[3]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entryFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "enum Bet5Game.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolsEntered",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolDuration",
          "type": "uint256"
        }
      ],
      "name": "setPoolDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolEntryInterval",
          "type": "uint256"
        }
      ],
      "name": "setPoolEntryInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolStartInterval",
          "type": "uint256"
        }
      ],
      "name": "setPoolStartInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x39f7bb0f83c17b63066156b861832617f9b55e912234c9e467ae4c688709d7d1",
  "receipt": {
    "to": null,
    "from": "0xCACe706c682fF9d8EEED79619a94EEefEDaa8ea8",
    "contractAddress": "0x028a96397B3cD8e205aF2aa44C420CC2B75725e9",
    "transactionIndex": 1,
    "gasUsed": "2504966",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000018020000000000000000000000000000000000000000000000000000000800001000000000000000100000000000000000000020000000000000000000800000000000000000080000000000000400000000000000000000000000000000000000000000000000000000000000000200100000000000000000000000000000000000000000000040000000000024000000000000000000001000000000000000000000000000000100000000020000400040000000000000000000000000000002000000000000000000000100040",
    "blockHash": "0xd8cb05f2995ab5a674d3e271b21140910f8d03eccb7e632fd675a85069d57320",
    "transactionHash": "0x39f7bb0f83c17b63066156b861832617f9b55e912234c9e467ae4c688709d7d1",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 22527485,
        "transactionHash": "0x39f7bb0f83c17b63066156b861832617f9b55e912234c9e467ae4c688709d7d1",
        "address": "0x028a96397B3cD8e205aF2aa44C420CC2B75725e9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cace706c682ff9d8eeed79619a94eeefedaa8ea8"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0xd8cb05f2995ab5a674d3e271b21140910f8d03eccb7e632fd675a85069d57320"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 22527485,
        "transactionHash": "0x39f7bb0f83c17b63066156b861832617f9b55e912234c9e467ae4c688709d7d1",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000cace706c682ff9d8eeed79619a94eeefedaa8ea8",
          "0x000000000000000000000000e4b8e9222704401ad16d4d826732953daf07c7e2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000010afb9962220800000000000000000000000000000000000000000000000000327451875599ab2500000000000000000000000000000000000000000000000f169dcab221bb6b95000000000000000000000000000000000000000000000000316955edf377a32500000000000000000000000000000000000000000000000f17a8c64b83dd7395",
        "logIndex": 11,
        "blockHash": "0xd8cb05f2995ab5a674d3e271b21140910f8d03eccb7e632fd675a85069d57320"
      }
    ],
    "blockNumber": 22527485,
    "cumulativeGasUsed": "2769101",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8e44f35bcf27967511d28021d5f36314",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"PoolCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryFee\",\"type\":\"uint256\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[5]\",\"name\":\"tokens\",\"type\":\"address[5]\"},{\"indexed\":false,\"internalType\":\"int256[5]\",\"name\":\"prices\",\"type\":\"int256[5]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newEntry\",\"type\":\"bool\"}],\"name\":\"PoolEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"PoolRewardTransfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ENTRY_COUNT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_ENTRY_COUNT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUM_USER_SELECTION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_ENTRY_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_START_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WINNER_COUNT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"cancelPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_entryFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address[5]\",\"name\":\"_tokens\",\"type\":\"address[5]\"}],\"name\":\"enterPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getNetPoints\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolEntries\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPoolPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolWinners\",\"outputs\":[{\"internalType\":\"address[3]\",\"name\":\"\",\"type\":\"address[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUserPoolEntries\",\"outputs\":[{\"components\":[{\"internalType\":\"address[5]\",\"name\":\"tokens\",\"type\":\"address[5]\"},{\"internalType\":\"int256[5]\",\"name\":\"prices\",\"type\":\"int256[5]\"}],\"internalType\":\"struct Bet5Game.UserEntry\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeperPoolCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"leaderboard\",\"outputs\":[{\"internalType\":\"address[3]\",\"name\":\"\",\"type\":\"address[3]\"},{\"internalType\":\"int256[3]\",\"name\":\"\",\"type\":\"int256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum Bet5Game.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolsEntered\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolDuration\",\"type\":\"uint256\"}],\"name\":\"setPoolDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolEntryInterval\",\"type\":\"uint256\"}],\"name\":\"setPoolEntryInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolStartInterval\",\"type\":\"uint256\"}],\"name\":\"setPoolStartInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"cancelPool(uint256)\":{\"params\":{\"_poolId\":\"Unique ID of the pool to cancel\"}},\"createPool(uint256,address)\":{\"params\":{\"_entryFee\":\"amount of accepted tokens to be deposited by user to enter pool\",\"_token\":\"accepted token of the pool in terms of which the entry fee is based\"}},\"distributeRewards(uint256)\":{\"params\":{\"_poolId\":\"Unique ID of the pool to distribute rewards to winners\"}},\"enterPool(uint256,address[5])\":{\"params\":{\"_poolId\":\"Unique ID of the pool to enter\",\"_tokens\":\"List of token aggregator addresses\"}},\"getNetPoints(uint256,address)\":{\"params\":{\"_address\":\"User address of which points are to be calculated\",\"_poolId\":\"Unique ID of the pool\"},\"returns\":{\"_0\":\"Number of points till current time based upon their pool token selection\"}},\"getPoolEntries(uint256)\":{\"params\":{\"_poolId\":\"Unique ID of the pool\"},\"returns\":{\"_0\":\"List of addresses of users that entered the pool\"}},\"getPoolPosition(uint256,address)\":{\"params\":{\"_address\":\"User address of which position and points are to be calculated\",\"_poolId\":\"Unique ID of the pool\"},\"returns\":{\"_0\":\"Position and net points of the user among all the pool entries\"}},\"getPoolWinners(uint256)\":{\"params\":{\"_poolId\":\"Unique ID of the pool\"},\"returns\":{\"_0\":\"List of winners after pool has ended\"}},\"getUserPoolEntries(uint256,address)\":{\"params\":{\"_address\":\"User address of which pool entries are required\",\"_poolId\":\"Unique ID of the pool\"},\"returns\":{\"_0\":\"UserEntry struct which has list of tokens and their initial prices\"}},\"leaderboard(uint256)\":{\"params\":{\"_poolId\":\"Unique ID of the pool\"},\"returns\":{\"_0\":\"List of top `WINNER_COUNT` users and their respective points in descending order of points\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawFees(address)\":{\"params\":{\"_token\":\"Address of token to withdraw collected fee\"}}},\"title\":\"A betting game for users to predict top performing crypto tokens and win pool rewards\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelPool(uint256)\":{\"notice\":\"Disbales additional entries and returns the deposited tokens of users if number of entries is less than `MIN_ENTRY_COUNT`\"},\"checkUpkeep(bytes)\":{\"notice\":\"Keeper function to check if any pool needs to be cancelled or to distribute rewards\"},\"createPool(uint256,address)\":{\"notice\":\"Create a new pool for users to enter and select tokens\"},\"distributeRewards(uint256)\":{\"notice\":\"Distributes pool rewards to winners based on gains of token selection\"},\"enterPool(uint256,address[5])\":{\"notice\":\"Adds user to list of pool entries, collects entry fee, and stores the current token prices\"},\"getPoolPosition(uint256,address)\":{\"notice\":\"Calculates the position of a user in a pool based upon the gains of their selected tokens\"},\"performUpkeep(bytes)\":{\"notice\":\"Keeper function to automatically cancel pool or distribute pool rewards\"},\"withdrawFees(address)\":{\"notice\":\"Transfers the collected fee of the provided token to owner address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bet5Game.sol\":\"Bet5Game\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n\\n  /**\\n   * @notice checks if the contract requires work to be done.\\n   * @param checkData data passed to the contract when checking for upkeep.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with,\\n   * if upkeep is needed.\\n   */\\n  function checkUpkeep(\\n    bytes calldata checkData\\n  )\\n    external\\n    returns (\\n      bool upkeepNeeded,\\n      bytes memory performData\\n    );\\n\\n  /**\\n   * @notice Performs work on the contract. Executed by the keepers, via the registry.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation.\\n   */\\n  function performUpkeep(\\n    bytes calldata performData\\n  ) external;\\n}\\n\",\"keccak256\":\"0xd2d73117e394024c56c712e4b73fc91b5d4ae2ede33752d237df4d0361851feb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa1b27b3f44ff825974e5268e8f63ad3b03add5b464880d860fbb8cae043e17f7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x86ebc6cea2b539c2d4a79a4754f7c90c43c45c9aaf0aab32ecffb1565afc5e0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x53a0bb51b8a505e04aaf065de27c0e31cadf38194f8a9a6ec92b7bcd3c5826e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x842c66d5965ed0bf77f274732c2a93a7e2223d53171ec9cccc473bde75104ead\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"contracts/Bet5Game.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\n/**\\n    @title A betting game for users to predict top performing crypto tokens and win pool rewards\\n  */\\ncontract Bet5Game is Ownable, ReentrancyGuard, KeeperCompatibleInterface {\\n    uint16 private constant DENOMINATOR = 10000;\\n    uint8 public constant WINNER_COUNT = 3;\\n    uint8 public constant MIN_ENTRY_COUNT = 6;\\n    uint8 public constant MAX_ENTRY_COUNT = 30;\\n    uint8 public constant NUM_USER_SELECTION = 5;\\n    uint16 public constant FEE = 500;\\n\\n    uint256 public POOL_ENTRY_INTERVAL = 30 minutes;\\n    uint256 public POOL_START_INTERVAL = 60 minutes;\\n    uint256 public POOL_DURATION = 60 minutes;\\n\\n    // --------------------- TEST FUNCTIONS --------------------\\n\\n    function setPoolEntryInterval(uint256 _poolEntryInterval)\\n        external\\n        onlyOwner\\n    {\\n        POOL_ENTRY_INTERVAL = _poolEntryInterval;\\n    }\\n\\n    function setPoolStartInterval(uint256 _poolStartInterval)\\n        external\\n        onlyOwner\\n    {\\n        POOL_START_INTERVAL = _poolStartInterval;\\n    }\\n\\n    function setPoolDuration(uint256 _poolDuration) external onlyOwner {\\n        POOL_DURATION = _poolDuration;\\n    }\\n\\n    enum Status {\\n        ACTIVE,\\n        CANCELLED,\\n        COMPLETE\\n    }\\n\\n    struct Pool {\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 entryFee;\\n        address token;\\n        address[] entries;\\n        address[WINNER_COUNT] winners;\\n        Status status;\\n    }\\n\\n    struct UserEntry {\\n        address[NUM_USER_SELECTION] tokens;\\n        int256[NUM_USER_SELECTION] prices;\\n    }\\n\\n    uint256 public poolCounter;\\n    uint256 public keeperPoolCounter;\\n\\n    mapping(address => uint256) public feeCollected;\\n    mapping(address => uint256) public poolsEntered;\\n    mapping(uint256 => Pool) public pools;\\n    mapping(uint256 => mapping(address => UserEntry)) internal userPoolEntries;\\n\\n    event PoolCreated(\\n        uint256 indexed poolId,\\n        uint256 indexed startTime,\\n        uint256 endTime,\\n        address indexed token,\\n        uint256 entryFee\\n    );\\n    event PoolEntered(\\n        uint256 indexed poolId,\\n        address indexed user,\\n        address[NUM_USER_SELECTION] tokens,\\n        int256[NUM_USER_SELECTION] prices,\\n        bool newEntry\\n    );\\n    event PoolCancelled(uint256 indexed poolId);\\n    event PoolRewardTransfer(\\n        uint256 indexed poolId,\\n        uint256 indexed amount,\\n        address indexed winner\\n    );\\n    event FeeWithdrawn(address indexed token, uint256 indexed amount);\\n\\n    constructor() {\\n        keeperPoolCounter = 1;\\n    }\\n\\n    /**\\n        @notice Create a new pool for users to enter and select tokens\\n        @param _entryFee amount of accepted tokens to be deposited by user to enter pool\\n        @param _token accepted token of the pool in terms of which the entry fee is based\\n     */\\n    function createPool(uint256 _entryFee, address _token) external {\\n        require(_entryFee > 0, \\\"Increase entry fee\\\");\\n        require(\\n            bytes(ERC20(_token).name()).length > 0,\\n            \\\"Invalid token address\\\"\\n        );\\n\\n        uint256 poolId = ++poolCounter;\\n        pools[poolId].startTime = block.timestamp + POOL_START_INTERVAL;\\n        pools[poolId].endTime =\\n            block.timestamp +\\n            POOL_START_INTERVAL +\\n            POOL_DURATION;\\n        pools[poolId].entryFee = _entryFee;\\n        pools[poolId].token = _token;\\n        pools[poolId].status = Status.ACTIVE;\\n\\n        emit PoolCreated(\\n            poolId,\\n            pools[poolId].startTime,\\n            pools[poolId].endTime,\\n            _token,\\n            _entryFee\\n        );\\n    }\\n\\n    /**\\n        @notice Adds user to list of pool entries, collects entry fee, and stores the current token prices\\n        @param _poolId Unique ID of the pool to enter\\n        @param _tokens List of token aggregator addresses\\n     */\\n    function enterPool(\\n        uint256 _poolId,\\n        address[NUM_USER_SELECTION] memory _tokens\\n    ) external nonReentrant {\\n        Pool storage pool = pools[_poolId];\\n\\n        require(\\n            block.timestamp >= pool.startTime - POOL_ENTRY_INTERVAL,\\n            \\\"Pool entry not started\\\"\\n        );\\n        require(pool.startTime > block.timestamp, \\\"Pool entry time over\\\");\\n        require(\\n            _tokens.length == NUM_USER_SELECTION,\\n            \\\"Invalid token selection\\\"\\n        );\\n        require(pool.entries.length < MAX_ENTRY_COUNT, \\\"Pool limit reached\\\");\\n\\n        bool newEntry = userPoolEntries[_poolId][msg.sender].tokens[0] ==\\n            address(0);\\n        userPoolEntries[_poolId][msg.sender].tokens = _tokens;\\n        poolsEntered[msg.sender] += 1;\\n\\n        for (uint8 i = 0; i < NUM_USER_SELECTION; i++) {\\n            AggregatorV3Interface aggregator = AggregatorV3Interface(\\n                _tokens[i]\\n            );\\n            (, int256 price, , , ) = aggregator.latestRoundData();\\n            require(price > 0, \\\"Token price feed not found\\\");\\n            userPoolEntries[_poolId][msg.sender].prices[i] = price;\\n        }\\n\\n        if (newEntry) {\\n            pool.entries.push(msg.sender);\\n\\n            ERC20(pool.token).transferFrom(\\n                msg.sender,\\n                address(this),\\n                pool.entryFee\\n            );\\n        }\\n\\n        emit PoolEntered(\\n            _poolId,\\n            msg.sender,\\n            _tokens,\\n            userPoolEntries[_poolId][msg.sender].prices,\\n            newEntry\\n        );\\n    }\\n\\n    /**\\n        @notice Disbales additional entries and returns the deposited tokens of users if number of entries is less than `MIN_ENTRY_COUNT`\\n        @param _poolId Unique ID of the pool to cancel\\n     */\\n    function cancelPool(uint256 _poolId) public {\\n        Pool storage pool = pools[_poolId];\\n\\n        require(pool.endTime > pool.startTime, \\\"Pool already cancelled\\\");\\n        require(block.timestamp > pool.startTime, \\\"Pool not started\\\");\\n        require(\\n            pool.entries.length < MIN_ENTRY_COUNT,\\n            \\\"Entry count exceeds cancel limit\\\"\\n        );\\n\\n        pool.endTime = pool.startTime;\\n        pool.status = Status.CANCELLED;\\n\\n        for (uint8 i = 0; i < pool.entries.length; i++) {\\n            poolsEntered[pool.entries[i]] -= 1;\\n            ERC20(pool.token).transfer(pool.entries[i], pool.entryFee);\\n        }\\n\\n        emit PoolCancelled(_poolId);\\n    }\\n\\n    /**\\n        @notice Distributes pool rewards to winners based on gains of token selection\\n        @param _poolId Unique ID of the pool to distribute rewards to winners\\n     */\\n    function distributeRewards(uint256 _poolId) public nonReentrant {\\n        Pool storage pool = pools[_poolId];\\n\\n        require(block.timestamp >= pool.endTime, \\\"Pool in progress\\\");\\n        require(pool.winners[0] == address(0), \\\"Rewards already distributed\\\");\\n\\n        (address[WINNER_COUNT] memory winners, ) = leaderboard(_poolId);\\n\\n        pool.status = Status.COMPLETE;\\n        pool.winners = winners;\\n\\n        uint256 fee = (pool.entries.length * pool.entryFee * FEE) / DENOMINATOR;\\n        feeCollected[pool.token] += fee;\\n        uint256 rewards = pool.entries.length * pool.entryFee - fee;\\n\\n        for (uint8 i = 0; i < WINNER_COUNT; i++) {\\n            address winner = winners[i];\\n\\n            // hard coded, will have to be modified if `WINNER_COUNT` is changed\\n\\n            uint256 amount = (rewards * (WINNER_COUNT - i)) / 6;\\n            ERC20(pool.token).transfer(winner, amount);\\n\\n            emit PoolRewardTransfer(_poolId, amount, winner);\\n        }\\n    }\\n\\n    /**\\n        @notice Transfers the collected fee of the provided token to owner address\\n        @param _token Address of token to withdraw collected fee\\n    */\\n    function withdrawFees(address _token) external nonReentrant onlyOwner {\\n        require(feeCollected[_token] > 0, \\\"No fee to collect\\\");\\n\\n        uint256 amount = feeCollected[_token];\\n        delete feeCollected[_token];\\n\\n        ERC20(_token).transfer(msg.sender, amount);\\n\\n        emit FeeWithdrawn(_token, amount);\\n    }\\n\\n    /**\\n        @notice Keeper function to automatically cancel pool or distribute pool rewards\\n     */\\n    function performUpkeep(\\n        bytes calldata /* performData */\\n    ) external override {\\n        Pool memory pool = pools[keeperPoolCounter];\\n        if (\\n            block.timestamp >= pool.startTime &&\\n            pool.entries.length < MIN_ENTRY_COUNT\\n        ) {\\n            cancelPool(keeperPoolCounter++);\\n        } else if (block.timestamp > pool.endTime) {\\n            distributeRewards(keeperPoolCounter++);\\n        }\\n    }\\n\\n    // --------------------- VIEW FUNCTIONS ---------------------\\n\\n    /**\\n        @notice Keeper function to check if any pool needs to be cancelled or to distribute rewards\\n     */\\n    function checkUpkeep(\\n        bytes calldata /* checkData */\\n    ) external override returns (bool upkeepNeeded, bytes memory) {\\n        Pool memory pool = pools[keeperPoolCounter];\\n\\n        // pool should exist (invalid case)\\n        // by start time it does not have enough entries (cancel case)\\n        // crosses end time (reward winners case)\\n        upkeepNeeded =\\n            keeperPoolCounter <= poolCounter &&\\n            ((block.timestamp >= pool.startTime &&\\n                pool.entries.length < MIN_ENTRY_COUNT) ||\\n                block.timestamp > pool.endTime);\\n    }\\n\\n    /**\\n        @param _poolId Unique ID of the pool\\n        @param _address User address of which points are to be calculated\\n        @return Number of points till current time based upon their pool token selection\\n     */\\n    function getNetPoints(uint256 _poolId, address _address)\\n        public\\n        view\\n        returns (int256)\\n    {\\n        require(pools[_poolId].status == Status.ACTIVE, \\\"Pool not active\\\");\\n\\n        int256 netPoints = 0;\\n\\n        for (uint8 i = 0; i < NUM_USER_SELECTION; i++) {\\n            AggregatorV3Interface aggregator = AggregatorV3Interface(\\n                userPoolEntries[_poolId][_address].tokens[i]\\n            );\\n            (, int256 price, , , ) = aggregator.latestRoundData();\\n            netPoints +=\\n                ((price - userPoolEntries[_poolId][_address].prices[i]) *\\n                    int256(uint256(DENOMINATOR))) /\\n                userPoolEntries[_poolId][_address].prices[i];\\n        }\\n\\n        return netPoints / int256(uint256(NUM_USER_SELECTION));\\n    }\\n\\n    /**\\n        @notice Calculates the position of a user in a pool based upon the gains of their selected tokens\\n        @param _poolId Unique ID of the pool\\n        @param _address User address of which position and points are to be calculated\\n        @return Position and net points of the user among all the pool entries\\n     */\\n    function getPoolPosition(uint256 _poolId, address _address)\\n        external\\n        view\\n        returns (uint256, int256)\\n    {\\n        require(block.timestamp > pools[_poolId].startTime, \\\"Pool not started\\\");\\n        require(block.timestamp <= pools[_poolId].endTime, \\\"Pool has ended\\\");\\n\\n        address[] memory entries = pools[_poolId].entries;\\n        int256 netPoints = getNetPoints(_poolId, _address);\\n        uint256 count = 1;\\n        uint256 userIndex = entries.length;\\n\\n        for (uint256 i = 0; i < entries.length; i++) {\\n            address user = entries[i];\\n            if (user == _address) {\\n                userIndex = i;\\n            }\\n            if (netPoints < getNetPoints(_poolId, user)) {\\n                count++;\\n            } else if (\\n                netPoints == getNetPoints(_poolId, user) && userIndex > i\\n            ) {\\n                count++;\\n            }\\n        }\\n\\n        return (count, netPoints);\\n    }\\n\\n    /**\\n        @param _poolId Unique ID of the pool\\n        @return List of addresses of users that entered the pool\\n     */\\n    function getPoolEntries(uint256 _poolId)\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return pools[_poolId].entries;\\n    }\\n\\n    /**\\n        @param _poolId Unique ID of the pool\\n        @return List of winners after pool has ended\\n    */\\n    function getPoolWinners(uint256 _poolId)\\n        external\\n        view\\n        returns (address[WINNER_COUNT] memory)\\n    {\\n        require(pools[_poolId].status == Status.COMPLETE, \\\"Pool has not ended\\\");\\n\\n        return pools[_poolId].winners;\\n    }\\n\\n    /**\\n        @param _poolId Unique ID of the pool\\n        @param _address User address of which pool entries are required\\n        @return UserEntry struct which has list of tokens and their initial prices\\n     */\\n    function getUserPoolEntries(uint256 _poolId, address _address)\\n        external\\n        view\\n        returns (UserEntry memory)\\n    {\\n        return userPoolEntries[_poolId][_address];\\n    }\\n\\n    /**\\n        @param _poolId Unique ID of the pool\\n        @return List of top `WINNER_COUNT` users and their respective points in descending order of points\\n     */\\n    function leaderboard(uint256 _poolId)\\n        public\\n        view\\n        returns (address[WINNER_COUNT] memory, int256[WINNER_COUNT] memory)\\n    {\\n        Pool memory pool = pools[_poolId];\\n\\n        require(pool.entries.length >= MIN_ENTRY_COUNT, \\\"Add more entries\\\");\\n        require(pool.status == Status.ACTIVE, \\\"Pool not active\\\");\\n\\n        address[WINNER_COUNT] memory winners;\\n        int256[WINNER_COUNT] memory netPoints;\\n\\n        for (uint8 i = 0; i < pool.entries.length; i++) {\\n            int256 points = getNetPoints(_poolId, pool.entries[i]);\\n\\n            // hard coded, will have to be modified if `WINNER_COUNT` is changed\\n\\n            if (points > netPoints[0] || winners[0] == address(0)) {\\n                winners[2] = winners[1];\\n                winners[1] = winners[0];\\n                winners[0] = pool.entries[i];\\n\\n                netPoints[2] = netPoints[1];\\n                netPoints[1] = netPoints[0];\\n                netPoints[0] = points;\\n            } else if (points > netPoints[1] || winners[1] == address(0)) {\\n                winners[2] = winners[1];\\n                winners[1] = pool.entries[i];\\n\\n                netPoints[2] = netPoints[1];\\n                netPoints[1] = points;\\n            } else if (points > netPoints[2] || winners[2] == address(0)) {\\n                winners[2] = pool.entries[i];\\n\\n                netPoints[2] = points;\\n            }\\n        }\\n\\n        return (winners, netPoints);\\n    }\\n}\\n\",\"keccak256\":\"0xa070bd9d7a6616ad8b2a2ad1451a8bcdcf93fc55ebaf6e1e10a637590998ed18\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052610708600255610e10600355610e1060045534801561002257600080fd5b5061002c33610039565b6001808055600655610089565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6129e2806100986000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c8063875960821161010f578063b2c9a521116100a2578063c57981b511610071578063c57981b5146104a0578063cd26479a146104bc578063d4299b44146104c5578063f2fde38b146104ce57600080fd5b8063b2c9a5211461045b578063bdacd07114610464578063be0b925114610477578063bf3683991461047f57600080fd5b8063a829e46b116100de578063a829e46b146103be578063aa61e915146103c6578063ac4afa38146103d9578063b28a56181461043357600080fd5b8063875960821461037f5780638da5cb5b146103925780639934bba5146103ad5780639e3079cb146103b557600080fd5b806359974e381161018757806373f65a9f1161015657806373f65a9f146103365780637914d3331461035057806380e31f5a14610363578063827c78891461036c57600080fd5b806359974e38146102da5780636e04ff0d146102ed578063715018a61461030e57806372ce25c21461031657600080fd5b80632b00e962116101c35780632b00e962146102595780632d2acbbd146102795780634585e33b146102a75780634d7c0f5b146102ba57600080fd5b806301206dbe146101f557806302a01dc21461020a578063164e68de1461021d57806317c1fdd314610230575b600080fd5b6102086102033660046123e6565b6104e1565b005b6102086102183660046123a3565b6108e9565b61020861022b36600461224c565b610918565b61024361023e3660046123a3565b610a96565b60405161025091906125be565b60405180910390f35b61026c6102673660046123bb565b610b05565b60405161025091906126b3565b61029961028736600461224c565b60086020526000908152604090205481565b604051908152602001610250565b6102086102b536600461228d565b610bb1565b6102cd6102c83660046123a3565b610d51565b6040516102509190612527565b6102086102e83660046123a3565b610e1e565b6103006102fb36600461228d565b6110f6565b60405161025092919061260b565b610208611276565b61029961032436600461224c565b60076020526000908152604090205481565b61033e601e81565b60405160ff9091168152602001610250565b61020861035e3660046123bb565b6112ac565b61029960025481565b61020861037a3660046123a3565b61148b565b61020861038d3660046123a3565b61171f565b6000546040516001600160a01b039091168152602001610250565b61033e600381565b61029960055481565b61033e600581565b6102996103d43660046123bb565b61174e565b6104226103e73660046123a3565b600960205260009081526040902080546001820154600283015460038401546008909401549293919290916001600160a01b03169060ff1685565b6040516102509594939291906126fb565b6104466104413660046123bb565b611996565b60408051928352602083019190915201610250565b61029960045481565b6102086104723660046123a3565b611b7d565b61033e600681565b61049261048d3660046123a3565b611bac565b604051610250929190612535565b6104a96101f481565b60405161ffff9091168152602001610250565b61029960065481565b61029960035481565b6102086104dc36600461224c565b612016565b6002600154141561050d5760405162461bcd60e51b81526004016105049061267c565b60405180910390fd5b6002600181905560008381526009602052604090209054815461053091906128c9565b4210156105785760405162461bcd60e51b8152602060048201526016602482015275141bdbdb08195b9d1c9e481b9bdd081cdd185c9d195960521b6044820152606401610504565b805442106105bf5760405162461bcd60e51b81526020600482015260146024820152732837b7b61032b73a393c903a34b6b29037bb32b960611b6044820152606401610504565b6004810154601e116106085760405162461bcd60e51b8152602060048201526012602482015271141bdbdb081b1a5b5a5d081c995858da195960721b6044820152606401610504565b6000838152600a60209081526040808320338452909152902080546001600160a01b0316159061063a90846005612101565b5033600090815260086020526040812080546001929061065b90849061278e565b90915550600090505b600560ff821610156107be576000848260ff166005811061069557634e487b7160e01b600052603260045260246000fd5b602002015190506000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156106d757600080fd5b505afa1580156106eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070f919061247a565b505050915050600081136107655760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e2070726963652066656564206e6f7420666f756e640000000000006044820152606401610504565b6000878152600a602090815260408083203384529091529020819060059081019060ff86169081106107a757634e487b7160e01b600052603260045260246000fd5b0155508190506107b68161294a565b915050610664565b5080156108835760048281018054600181018255600091825260209091200180546001600160a01b03191633908117909155600384015460028501546040516323b872dd60e01b81529384019290925230602484015260448301919091526001600160a01b0316906323b872dd90606401602060405180830381600087803b15801561084957600080fd5b505af115801561085d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610881919061226d565b505b6000848152600a60209081526040808320338085529252918290209151909186917f26a3cff30c39cb1bb7df29d5047e2c7dd4340df12cffc44d9ededfef55e5b5a3916108d7918891600501908790612574565b60405180910390a35050600180555050565b6000546001600160a01b031633146109135760405162461bcd60e51b815260040161050490612647565b600455565b6002600154141561093b5760405162461bcd60e51b81526004016105049061267c565b60026001556000546001600160a01b0316331461096a5760405162461bcd60e51b815260040161050490612647565b6001600160a01b0381166000908152600760205260409020546109c35760405162461bcd60e51b8152602060048201526011602482015270139bc8199959481d1bc818dbdb1b1958dd607a1b6044820152606401610504565b6001600160a01b03811660008181526007602052604080822080549290555163a9059cbb60e01b81523360048201526024810182905290919063a9059cbb90604401602060405180830381600087803b158015610a1f57600080fd5b505af1158015610a33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a57919061226d565b5060405181906001600160a01b038416907f78473f3f373f7673597f4f0fa5873cb4d375fea6d4339ad6b56dbd411513cb3f90600090a3505060018055565b600081815260096020908152604091829020600401805483518184028101840190945280845260609392830182828015610af957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610adb575b50505050509050919050565b610b0d612159565b6000838152600a602090815260408083206001600160a01b038616845290915290819020815160e08101835291829081018260058282826020028201915b81546001600160a01b03168152600190910190602001808311610b4b5750505091835250506040805160a08101918290526020909201919060058481019182845b815481526020019060010190808311610b8c5750505050508152505090505b92915050565b6006546000908152600960209081526040808320815160e0810183528154815260018201548185015260028201548184015260038201546001600160a01b03166060820152600482018054845181870281018701909552808552919492936080860193909290830182828015610c5057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c32575b505050918352505060408051606081019182905260209092019190600584019060039082845b81546001600160a01b03168152600190910190602001808311610c76575050509183525050600882015460209091019060ff166002811115610cc857634e487b7160e01b600052602160045260246000fd5b6002811115610ce757634e487b7160e01b600052602160045260246000fd5b90525080519091504210801590610d0357506080810151516006115b15610d295760068054610d24916000610d1b8361292f565b9190505561148b565b505050565b8060200151421115610d245760068054610d24916000610d488361292f565b91905055610e1e565b610d5961217e565b600260008381526009602052604090206008015460ff166002811115610d8f57634e487b7160e01b600052602160045260246000fd5b14610dd15760405162461bcd60e51b8152602060048201526012602482015271141bdbdb081a185cc81b9bdd08195b99195960721b6044820152606401610504565b600082815260096020908152604091829020825160608101938490526005820180546001600160a01b0316825290939092600392600601908501808311610adb5750505050509050919050565b60026001541415610e415760405162461bcd60e51b81526004016105049061267c565b60026001908155600082815260096020526040902090810154421015610e9c5760405162461bcd60e51b815260206004820152601060248201526f506f6f6c20696e2070726f677265737360801b6044820152606401610504565b60058101546001600160a01b031615610ef75760405162461bcd60e51b815260206004820152601b60248201527f5265776172647320616c726561647920646973747269627574656400000000006044820152606401610504565b6000610f0283611bac565b5060088301805460ff191660021790559050610f236005830182600361219c565b5060028201546004830154600091612710916101f491610f429161286b565b610f4c919061286b565b610f5691906127d4565b60038401546001600160a01b0316600090815260076020526040812080549293508392909190610f8790849061278e565b9091555050600283015460048401546000918391610fa5919061286b565b610faf91906128c9565b905060005b600360ff821610156110ea576000848260ff1660038110610fe557634e487b7160e01b600052603260045260246000fd5b6020020151905060006006610ffb8460036128e0565b6110089060ff168661286b565b61101291906127d4565b600388015460405163a9059cbb60e01b81526001600160a01b0385811660048301526024820184905292935091169063a9059cbb90604401602060405180830381600087803b15801561106457600080fd5b505af1158015611078573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109c919061226d565b50816001600160a01b031681897fe1c0e377d303a930126a7da6865a6682da1498141bdd4bb07538411c5f7d6dad60405160405180910390a4505080806110e29061294a565b915050610fb4565b50506001805550505050565b6006546000908152600960209081526040808320815160e0810183528154815260018201548185015260028201548184015260038201546001600160a01b031660608281019190915260048301805485518188028101880190965280865291958795939493608086019390929183018282801561119c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161117e575b505050918352505060408051606081019182905260209092019190600584019060039082845b81546001600160a01b031681526001909101906020018083116111c2575050509183525050600882015460209091019060ff16600281111561121457634e487b7160e01b600052602160045260246000fd5b600281111561123357634e487b7160e01b600052602160045260246000fd5b8152505090506005546006541115801561126c57508051421080159061125e57506080810151516006115b8061126c5750806020015142115b9250509250929050565b6000546001600160a01b031633146112a05760405162461bcd60e51b815260040161050490612647565b6112aa60006120b1565b565b600082116112f15760405162461bcd60e51b8152602060048201526012602482015271496e63726561736520656e7472792066656560701b6044820152606401610504565b6000816001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561132c57600080fd5b505afa158015611340573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261136891908101906122fa565b51116113ae5760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b6044820152606401610504565b60006005600081546113bf9061292f565b91829055506003549091506113d4904261278e565b6000828152600960205260409020556004546003546113f3904261278e565b6113fd919061278e565b60008281526009602090815260409182902060018101849055600281018790556003810180546001600160a01b0319166001600160a01b03881690811790915560088201805460ff191690559054835194855291840187905292909184917fc659fd886acdce2ad3a8fec0eba18974cbbcebe2d76037390dd629833f76c67b910160405180910390a4505050565b600081815260096020526040902080546001820154116114e65760405162461bcd60e51b8152602060048201526016602482015275141bdbdb08185b1c9958591e4818d85b98d95b1b195960521b6044820152606401610504565b805442116115295760405162461bcd60e51b815260206004820152601060248201526f141bdbdb081b9bdd081cdd185c9d195960821b6044820152606401610504565b600481015460061161157d5760405162461bcd60e51b815260206004820181905260248201527f456e74727920636f756e7420657863656564732063616e63656c206c696d69746044820152606401610504565b805460018083019190915560088201805460ff1916909117905560005b600482015460ff821610156116ef57600160086000846004018460ff16815481106115d557634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168352820192909252604001812080549091906116099084906128c9565b909155505060038201546004830180546001600160a01b039092169163a9059cbb919060ff851690811061164d57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600285015460405160e084901b6001600160e01b03191681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156116a457600080fd5b505af11580156116b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116dc919061226d565b50806116e78161294a565b91505061159a565b5060405182907f3d229dd60fc64b0903758feed58453f62e715f5d01dc0978c0a3a312dd2776c290600090a25050565b6000546001600160a01b031633146117495760405162461bcd60e51b815260040161050490612647565b600255565b60008060008481526009602052604090206008015460ff16600281111561178557634e487b7160e01b600052602160045260246000fd5b146117c45760405162461bcd60e51b815260206004820152600f60248201526e506f6f6c206e6f742061637469766560881b6044820152606401610504565b6000805b600560ff82161015611982576000858152600a602090815260408083206001600160a01b0388168452909152812060ff83166005811061181857634e487b7160e01b600052603260045260246000fd5b0160009054906101000a90046001600160a01b031690506000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561186a57600080fd5b505afa15801561187e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a2919061247a565b5050506000898152600a602090815260408083206001600160a01b038c16845290915290209092506005908101915060ff85169081106118f257634e487b7160e01b600052603260045260246000fd5b01546000888152600a602090815260408083206001600160a01b038b16845290915290206127109060059081019060ff871690811061194157634e487b7160e01b600052603260045260246000fd5b015461194d908461288a565b61195791906127e8565b61196191906127a6565b61196b908561274d565b93505050808061197a9061294a565b9150506117c8565b5061198e6005826127a6565b949350505050565b600082815260096020526040812054819042116119e85760405162461bcd60e51b815260206004820152601060248201526f141bdbdb081b9bdd081cdd185c9d195960821b6044820152606401610504565b600084815260096020526040902060010154421115611a3a5760405162461bcd60e51b815260206004820152600e60248201526d141bdbdb081a185cc8195b99195960921b6044820152606401610504565b600084815260096020908152604080832060040180548251818502810185019093528083529192909190830182828015611a9d57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611a7f575b505050505090506000611ab0868661174e565b825190915060019060005b8451811015611b6e576000858281518110611ae657634e487b7160e01b600052603260045260246000fd5b60200260200101519050886001600160a01b0316816001600160a01b03161415611b0e578192505b611b188a8261174e565b851215611b315783611b298161292f565b945050611b5b565b611b3b8a8261174e565b85148015611b4857508183115b15611b5b5783611b578161292f565b9450505b5080611b668161292f565b915050611abb565b50909791965090945050505050565b6000546001600160a01b03163314611ba75760405162461bcd60e51b815260040161050490612647565b600355565b611bb461217e565b611bbc61217e565b6000838152600960209081526040808320815160e0810183528154815260018201548185015260028201548184015260038201546001600160a01b03166060820152600482018054845181870281018701909552808552919492936080860193909290830182828015611c5857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611c3a575b505050918352505060408051606081019182905260209092019190600584019060039082845b81546001600160a01b03168152600190910190602001808311611c7e575050509183525050600882015460209091019060ff166002811115611cd057634e487b7160e01b600052602160045260246000fd5b6002811115611cef57634e487b7160e01b600052602160045260246000fd5b90525060808101515190915060061115611d3e5760405162461bcd60e51b815260206004820152601060248201526f416464206d6f726520656e747269657360801b6044820152606401610504565b60008160c001516002811115611d6457634e487b7160e01b600052602160045260246000fd5b14611da35760405162461bcd60e51b815260206004820152600f60248201526e506f6f6c206e6f742061637469766560881b6044820152606401610504565b611dab61217e565b611db361217e565b60005b8360800151518160ff16101561200a576000611e008886608001518460ff1681518110611df357634e487b7160e01b600052603260045260246000fd5b602002602001015161174e565b8351909150811380611e1a575083516001600160a01b0316155b15611ebd576020840180516001600160a01b03908116604087015285511690526080850151805160ff8416908110611e6257634e487b7160e01b600052603260045260246000fd5b602002602001015184600060038110611e8b57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03929092166020928302919091015283018051604085015283519052808360005b6020020152611ff7565b6020830151811380611eda575060208401516001600160a01b0316155b15611f6a5760208401516001600160a01b031660408501526080850151805160ff8416908110611f1a57634e487b7160e01b600052603260045260246000fd5b602002602001015184600160038110611f4357634e487b7160e01b600052603260045260246000fd5b6001600160a01b039290921660209283029190910152830151604084015280836001611eb3565b6040830151811380611f87575060408401516001600160a01b0316155b15611ff75784608001518260ff1681518110611fb357634e487b7160e01b600052603260045260246000fd5b602002602001015184600260038110611fdc57634e487b7160e01b600052603260045260246000fd5b6001600160a01b039290921660209092020152604083018190525b50806120028161294a565b915050611db6565b50909590945092505050565b6000546001600160a01b031633146120405760405162461bcd60e51b815260040161050490612647565b6001600160a01b0381166120a55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610504565b6120ae816120b1565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8260058101928215612149579160200282015b8281111561214957825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612114565b506121559291506121e3565b5090565b604051806040016040528061216c6121f8565b81526020016121796121f8565b905290565b60405180606001604052806003906020820280368337509192915050565b8260038101928215612149579160200282018281111561214957825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612114565b5b8082111561215557600081556001016121e4565b6040518060a001604052806005906020820280368337509192915050565b80356001600160a01b038116811461222d57600080fd5b919050565b805169ffffffffffffffffffff8116811461222d57600080fd5b60006020828403121561225d578081fd5b61226682612216565b9392505050565b60006020828403121561227e578081fd5b81518015158114612266578182fd5b6000806020838503121561229f578081fd5b823567ffffffffffffffff808211156122b6578283fd5b818501915085601f8301126122c9578283fd5b8135818111156122d7578384fd5b8660208285010111156122e8578384fd5b60209290920196919550909350505050565b60006020828403121561230b578081fd5b815167ffffffffffffffff80821115612322578283fd5b818401915084601f830112612335578283fd5b81518181111561234757612347612996565b604051601f8201601f19908116603f0116810190838211818310171561236f5761236f612996565b81604052828152876020848701011115612387578586fd5b612398836020830160208801612903565b979650505050505050565b6000602082840312156123b4578081fd5b5035919050565b600080604083850312156123cd578182fd5b823591506123dd60208401612216565b90509250929050565b60008060c083850312156123f8578182fd5b82359150602084603f85011261240c578182fd5b60405160a0810181811067ffffffffffffffff8211171561242f5761242f612996565b6040528085830160c08701881015612445578485fd5b845b600581101561246b5761245982612216565b83529184019190840190600101612447565b50505080925050509250929050565b600080600080600060a08688031215612491578081fd5b61249a86612232565b94506020860151935060408601519250606086015191506124bd60808701612232565b90509295509295909350565b8060005b60038110156124f55781516001600160a01b03168452602093840193909101906001016124cd565b50505050565b8060005b60058110156124f55781516001600160a01b03168452602093840193909101906001016124ff565b60608101610bab82846124c9565b60c0810161254382856124c9565b606082018360005b600381101561256a57815183526020928301929091019060010161254b565b5050509392505050565b610160810161258382866124fb565b60a082018460005b60058110156125aa57815483526020909201916001918201910161258b565b505050821515610140830152949350505050565b6020808252825182820181905260009190848201906040850190845b818110156125ff5783516001600160a01b0316835292840192918401916001016125da565b50909695505050505050565b82151581526040602082015260008251806040840152612632816060850160208701612903565b601f01601f1916919091016060019392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000610140820190506126c78284516124fb565b60208084015160a0840160005b60058110156126f1578251825291830191908301906001016126d4565b5050505092915050565b85815260208101859052604081018490526001600160a01b038316606082015260a081016003831061273d57634e487b7160e01b600052602160045260246000fd5b8260808301529695505050505050565b600080821280156001600160ff1b038490038513161561276f5761276f61296a565b600160ff1b83900384128116156127885761278861296a565b50500190565b600082198211156127a1576127a161296a565b500190565b6000826127b5576127b5612980565b600160ff1b8214600019841416156127cf576127cf61296a565b500590565b6000826127e3576127e3612980565b500490565b60006001600160ff1b038184138284138082168684048611161561280e5761280e61296a565b600160ff1b8487128281168783058912161561282c5761282c61296a565b8587129250878205871284841616156128475761284761296a565b8785058712818416161561285d5761285d61296a565b505050929093029392505050565b60008160001904831182151516156128855761288561296a565b500290565b60008083128015600160ff1b8501841216156128a8576128a861296a565b6001600160ff1b03840183138116156128c3576128c361296a565b50500390565b6000828210156128db576128db61296a565b500390565b600060ff821660ff8416808210156128fa576128fa61296a565b90039392505050565b60005b8381101561291e578181015183820152602001612906565b838111156124f55750506000910152565b60006000198214156129435761294361296a565b5060010190565b600060ff821660ff8114156129615761296161296a565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212200fc6ae287c2aa13df801e92c9b752c566cb303ef473556dd1b726b7f7a95c7ae64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c8063875960821161010f578063b2c9a521116100a2578063c57981b511610071578063c57981b5146104a0578063cd26479a146104bc578063d4299b44146104c5578063f2fde38b146104ce57600080fd5b8063b2c9a5211461045b578063bdacd07114610464578063be0b925114610477578063bf3683991461047f57600080fd5b8063a829e46b116100de578063a829e46b146103be578063aa61e915146103c6578063ac4afa38146103d9578063b28a56181461043357600080fd5b8063875960821461037f5780638da5cb5b146103925780639934bba5146103ad5780639e3079cb146103b557600080fd5b806359974e381161018757806373f65a9f1161015657806373f65a9f146103365780637914d3331461035057806380e31f5a14610363578063827c78891461036c57600080fd5b806359974e38146102da5780636e04ff0d146102ed578063715018a61461030e57806372ce25c21461031657600080fd5b80632b00e962116101c35780632b00e962146102595780632d2acbbd146102795780634585e33b146102a75780634d7c0f5b146102ba57600080fd5b806301206dbe146101f557806302a01dc21461020a578063164e68de1461021d57806317c1fdd314610230575b600080fd5b6102086102033660046123e6565b6104e1565b005b6102086102183660046123a3565b6108e9565b61020861022b36600461224c565b610918565b61024361023e3660046123a3565b610a96565b60405161025091906125be565b60405180910390f35b61026c6102673660046123bb565b610b05565b60405161025091906126b3565b61029961028736600461224c565b60086020526000908152604090205481565b604051908152602001610250565b6102086102b536600461228d565b610bb1565b6102cd6102c83660046123a3565b610d51565b6040516102509190612527565b6102086102e83660046123a3565b610e1e565b6103006102fb36600461228d565b6110f6565b60405161025092919061260b565b610208611276565b61029961032436600461224c565b60076020526000908152604090205481565b61033e601e81565b60405160ff9091168152602001610250565b61020861035e3660046123bb565b6112ac565b61029960025481565b61020861037a3660046123a3565b61148b565b61020861038d3660046123a3565b61171f565b6000546040516001600160a01b039091168152602001610250565b61033e600381565b61029960055481565b61033e600581565b6102996103d43660046123bb565b61174e565b6104226103e73660046123a3565b600960205260009081526040902080546001820154600283015460038401546008909401549293919290916001600160a01b03169060ff1685565b6040516102509594939291906126fb565b6104466104413660046123bb565b611996565b60408051928352602083019190915201610250565b61029960045481565b6102086104723660046123a3565b611b7d565b61033e600681565b61049261048d3660046123a3565b611bac565b604051610250929190612535565b6104a96101f481565b60405161ffff9091168152602001610250565b61029960065481565b61029960035481565b6102086104dc36600461224c565b612016565b6002600154141561050d5760405162461bcd60e51b81526004016105049061267c565b60405180910390fd5b6002600181905560008381526009602052604090209054815461053091906128c9565b4210156105785760405162461bcd60e51b8152602060048201526016602482015275141bdbdb08195b9d1c9e481b9bdd081cdd185c9d195960521b6044820152606401610504565b805442106105bf5760405162461bcd60e51b81526020600482015260146024820152732837b7b61032b73a393c903a34b6b29037bb32b960611b6044820152606401610504565b6004810154601e116106085760405162461bcd60e51b8152602060048201526012602482015271141bdbdb081b1a5b5a5d081c995858da195960721b6044820152606401610504565b6000838152600a60209081526040808320338452909152902080546001600160a01b0316159061063a90846005612101565b5033600090815260086020526040812080546001929061065b90849061278e565b90915550600090505b600560ff821610156107be576000848260ff166005811061069557634e487b7160e01b600052603260045260246000fd5b602002015190506000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156106d757600080fd5b505afa1580156106eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070f919061247a565b505050915050600081136107655760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e2070726963652066656564206e6f7420666f756e640000000000006044820152606401610504565b6000878152600a602090815260408083203384529091529020819060059081019060ff86169081106107a757634e487b7160e01b600052603260045260246000fd5b0155508190506107b68161294a565b915050610664565b5080156108835760048281018054600181018255600091825260209091200180546001600160a01b03191633908117909155600384015460028501546040516323b872dd60e01b81529384019290925230602484015260448301919091526001600160a01b0316906323b872dd90606401602060405180830381600087803b15801561084957600080fd5b505af115801561085d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610881919061226d565b505b6000848152600a60209081526040808320338085529252918290209151909186917f26a3cff30c39cb1bb7df29d5047e2c7dd4340df12cffc44d9ededfef55e5b5a3916108d7918891600501908790612574565b60405180910390a35050600180555050565b6000546001600160a01b031633146109135760405162461bcd60e51b815260040161050490612647565b600455565b6002600154141561093b5760405162461bcd60e51b81526004016105049061267c565b60026001556000546001600160a01b0316331461096a5760405162461bcd60e51b815260040161050490612647565b6001600160a01b0381166000908152600760205260409020546109c35760405162461bcd60e51b8152602060048201526011602482015270139bc8199959481d1bc818dbdb1b1958dd607a1b6044820152606401610504565b6001600160a01b03811660008181526007602052604080822080549290555163a9059cbb60e01b81523360048201526024810182905290919063a9059cbb90604401602060405180830381600087803b158015610a1f57600080fd5b505af1158015610a33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a57919061226d565b5060405181906001600160a01b038416907f78473f3f373f7673597f4f0fa5873cb4d375fea6d4339ad6b56dbd411513cb3f90600090a3505060018055565b600081815260096020908152604091829020600401805483518184028101840190945280845260609392830182828015610af957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610adb575b50505050509050919050565b610b0d612159565b6000838152600a602090815260408083206001600160a01b038616845290915290819020815160e08101835291829081018260058282826020028201915b81546001600160a01b03168152600190910190602001808311610b4b5750505091835250506040805160a08101918290526020909201919060058481019182845b815481526020019060010190808311610b8c5750505050508152505090505b92915050565b6006546000908152600960209081526040808320815160e0810183528154815260018201548185015260028201548184015260038201546001600160a01b03166060820152600482018054845181870281018701909552808552919492936080860193909290830182828015610c5057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c32575b505050918352505060408051606081019182905260209092019190600584019060039082845b81546001600160a01b03168152600190910190602001808311610c76575050509183525050600882015460209091019060ff166002811115610cc857634e487b7160e01b600052602160045260246000fd5b6002811115610ce757634e487b7160e01b600052602160045260246000fd5b90525080519091504210801590610d0357506080810151516006115b15610d295760068054610d24916000610d1b8361292f565b9190505561148b565b505050565b8060200151421115610d245760068054610d24916000610d488361292f565b91905055610e1e565b610d5961217e565b600260008381526009602052604090206008015460ff166002811115610d8f57634e487b7160e01b600052602160045260246000fd5b14610dd15760405162461bcd60e51b8152602060048201526012602482015271141bdbdb081a185cc81b9bdd08195b99195960721b6044820152606401610504565b600082815260096020908152604091829020825160608101938490526005820180546001600160a01b0316825290939092600392600601908501808311610adb5750505050509050919050565b60026001541415610e415760405162461bcd60e51b81526004016105049061267c565b60026001908155600082815260096020526040902090810154421015610e9c5760405162461bcd60e51b815260206004820152601060248201526f506f6f6c20696e2070726f677265737360801b6044820152606401610504565b60058101546001600160a01b031615610ef75760405162461bcd60e51b815260206004820152601b60248201527f5265776172647320616c726561647920646973747269627574656400000000006044820152606401610504565b6000610f0283611bac565b5060088301805460ff191660021790559050610f236005830182600361219c565b5060028201546004830154600091612710916101f491610f429161286b565b610f4c919061286b565b610f5691906127d4565b60038401546001600160a01b0316600090815260076020526040812080549293508392909190610f8790849061278e565b9091555050600283015460048401546000918391610fa5919061286b565b610faf91906128c9565b905060005b600360ff821610156110ea576000848260ff1660038110610fe557634e487b7160e01b600052603260045260246000fd5b6020020151905060006006610ffb8460036128e0565b6110089060ff168661286b565b61101291906127d4565b600388015460405163a9059cbb60e01b81526001600160a01b0385811660048301526024820184905292935091169063a9059cbb90604401602060405180830381600087803b15801561106457600080fd5b505af1158015611078573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109c919061226d565b50816001600160a01b031681897fe1c0e377d303a930126a7da6865a6682da1498141bdd4bb07538411c5f7d6dad60405160405180910390a4505080806110e29061294a565b915050610fb4565b50506001805550505050565b6006546000908152600960209081526040808320815160e0810183528154815260018201548185015260028201548184015260038201546001600160a01b031660608281019190915260048301805485518188028101880190965280865291958795939493608086019390929183018282801561119c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161117e575b505050918352505060408051606081019182905260209092019190600584019060039082845b81546001600160a01b031681526001909101906020018083116111c2575050509183525050600882015460209091019060ff16600281111561121457634e487b7160e01b600052602160045260246000fd5b600281111561123357634e487b7160e01b600052602160045260246000fd5b8152505090506005546006541115801561126c57508051421080159061125e57506080810151516006115b8061126c5750806020015142115b9250509250929050565b6000546001600160a01b031633146112a05760405162461bcd60e51b815260040161050490612647565b6112aa60006120b1565b565b600082116112f15760405162461bcd60e51b8152602060048201526012602482015271496e63726561736520656e7472792066656560701b6044820152606401610504565b6000816001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561132c57600080fd5b505afa158015611340573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261136891908101906122fa565b51116113ae5760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b6044820152606401610504565b60006005600081546113bf9061292f565b91829055506003549091506113d4904261278e565b6000828152600960205260409020556004546003546113f3904261278e565b6113fd919061278e565b60008281526009602090815260409182902060018101849055600281018790556003810180546001600160a01b0319166001600160a01b03881690811790915560088201805460ff191690559054835194855291840187905292909184917fc659fd886acdce2ad3a8fec0eba18974cbbcebe2d76037390dd629833f76c67b910160405180910390a4505050565b600081815260096020526040902080546001820154116114e65760405162461bcd60e51b8152602060048201526016602482015275141bdbdb08185b1c9958591e4818d85b98d95b1b195960521b6044820152606401610504565b805442116115295760405162461bcd60e51b815260206004820152601060248201526f141bdbdb081b9bdd081cdd185c9d195960821b6044820152606401610504565b600481015460061161157d5760405162461bcd60e51b815260206004820181905260248201527f456e74727920636f756e7420657863656564732063616e63656c206c696d69746044820152606401610504565b805460018083019190915560088201805460ff1916909117905560005b600482015460ff821610156116ef57600160086000846004018460ff16815481106115d557634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168352820192909252604001812080549091906116099084906128c9565b909155505060038201546004830180546001600160a01b039092169163a9059cbb919060ff851690811061164d57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600285015460405160e084901b6001600160e01b03191681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156116a457600080fd5b505af11580156116b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116dc919061226d565b50806116e78161294a565b91505061159a565b5060405182907f3d229dd60fc64b0903758feed58453f62e715f5d01dc0978c0a3a312dd2776c290600090a25050565b6000546001600160a01b031633146117495760405162461bcd60e51b815260040161050490612647565b600255565b60008060008481526009602052604090206008015460ff16600281111561178557634e487b7160e01b600052602160045260246000fd5b146117c45760405162461bcd60e51b815260206004820152600f60248201526e506f6f6c206e6f742061637469766560881b6044820152606401610504565b6000805b600560ff82161015611982576000858152600a602090815260408083206001600160a01b0388168452909152812060ff83166005811061181857634e487b7160e01b600052603260045260246000fd5b0160009054906101000a90046001600160a01b031690506000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561186a57600080fd5b505afa15801561187e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a2919061247a565b5050506000898152600a602090815260408083206001600160a01b038c16845290915290209092506005908101915060ff85169081106118f257634e487b7160e01b600052603260045260246000fd5b01546000888152600a602090815260408083206001600160a01b038b16845290915290206127109060059081019060ff871690811061194157634e487b7160e01b600052603260045260246000fd5b015461194d908461288a565b61195791906127e8565b61196191906127a6565b61196b908561274d565b93505050808061197a9061294a565b9150506117c8565b5061198e6005826127a6565b949350505050565b600082815260096020526040812054819042116119e85760405162461bcd60e51b815260206004820152601060248201526f141bdbdb081b9bdd081cdd185c9d195960821b6044820152606401610504565b600084815260096020526040902060010154421115611a3a5760405162461bcd60e51b815260206004820152600e60248201526d141bdbdb081a185cc8195b99195960921b6044820152606401610504565b600084815260096020908152604080832060040180548251818502810185019093528083529192909190830182828015611a9d57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611a7f575b505050505090506000611ab0868661174e565b825190915060019060005b8451811015611b6e576000858281518110611ae657634e487b7160e01b600052603260045260246000fd5b60200260200101519050886001600160a01b0316816001600160a01b03161415611b0e578192505b611b188a8261174e565b851215611b315783611b298161292f565b945050611b5b565b611b3b8a8261174e565b85148015611b4857508183115b15611b5b5783611b578161292f565b9450505b5080611b668161292f565b915050611abb565b50909791965090945050505050565b6000546001600160a01b03163314611ba75760405162461bcd60e51b815260040161050490612647565b600355565b611bb461217e565b611bbc61217e565b6000838152600960209081526040808320815160e0810183528154815260018201548185015260028201548184015260038201546001600160a01b03166060820152600482018054845181870281018701909552808552919492936080860193909290830182828015611c5857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611c3a575b505050918352505060408051606081019182905260209092019190600584019060039082845b81546001600160a01b03168152600190910190602001808311611c7e575050509183525050600882015460209091019060ff166002811115611cd057634e487b7160e01b600052602160045260246000fd5b6002811115611cef57634e487b7160e01b600052602160045260246000fd5b90525060808101515190915060061115611d3e5760405162461bcd60e51b815260206004820152601060248201526f416464206d6f726520656e747269657360801b6044820152606401610504565b60008160c001516002811115611d6457634e487b7160e01b600052602160045260246000fd5b14611da35760405162461bcd60e51b815260206004820152600f60248201526e506f6f6c206e6f742061637469766560881b6044820152606401610504565b611dab61217e565b611db361217e565b60005b8360800151518160ff16101561200a576000611e008886608001518460ff1681518110611df357634e487b7160e01b600052603260045260246000fd5b602002602001015161174e565b8351909150811380611e1a575083516001600160a01b0316155b15611ebd576020840180516001600160a01b03908116604087015285511690526080850151805160ff8416908110611e6257634e487b7160e01b600052603260045260246000fd5b602002602001015184600060038110611e8b57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03929092166020928302919091015283018051604085015283519052808360005b6020020152611ff7565b6020830151811380611eda575060208401516001600160a01b0316155b15611f6a5760208401516001600160a01b031660408501526080850151805160ff8416908110611f1a57634e487b7160e01b600052603260045260246000fd5b602002602001015184600160038110611f4357634e487b7160e01b600052603260045260246000fd5b6001600160a01b039290921660209283029190910152830151604084015280836001611eb3565b6040830151811380611f87575060408401516001600160a01b0316155b15611ff75784608001518260ff1681518110611fb357634e487b7160e01b600052603260045260246000fd5b602002602001015184600260038110611fdc57634e487b7160e01b600052603260045260246000fd5b6001600160a01b039290921660209092020152604083018190525b50806120028161294a565b915050611db6565b50909590945092505050565b6000546001600160a01b031633146120405760405162461bcd60e51b815260040161050490612647565b6001600160a01b0381166120a55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610504565b6120ae816120b1565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8260058101928215612149579160200282015b8281111561214957825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612114565b506121559291506121e3565b5090565b604051806040016040528061216c6121f8565b81526020016121796121f8565b905290565b60405180606001604052806003906020820280368337509192915050565b8260038101928215612149579160200282018281111561214957825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612114565b5b8082111561215557600081556001016121e4565b6040518060a001604052806005906020820280368337509192915050565b80356001600160a01b038116811461222d57600080fd5b919050565b805169ffffffffffffffffffff8116811461222d57600080fd5b60006020828403121561225d578081fd5b61226682612216565b9392505050565b60006020828403121561227e578081fd5b81518015158114612266578182fd5b6000806020838503121561229f578081fd5b823567ffffffffffffffff808211156122b6578283fd5b818501915085601f8301126122c9578283fd5b8135818111156122d7578384fd5b8660208285010111156122e8578384fd5b60209290920196919550909350505050565b60006020828403121561230b578081fd5b815167ffffffffffffffff80821115612322578283fd5b818401915084601f830112612335578283fd5b81518181111561234757612347612996565b604051601f8201601f19908116603f0116810190838211818310171561236f5761236f612996565b81604052828152876020848701011115612387578586fd5b612398836020830160208801612903565b979650505050505050565b6000602082840312156123b4578081fd5b5035919050565b600080604083850312156123cd578182fd5b823591506123dd60208401612216565b90509250929050565b60008060c083850312156123f8578182fd5b82359150602084603f85011261240c578182fd5b60405160a0810181811067ffffffffffffffff8211171561242f5761242f612996565b6040528085830160c08701881015612445578485fd5b845b600581101561246b5761245982612216565b83529184019190840190600101612447565b50505080925050509250929050565b600080600080600060a08688031215612491578081fd5b61249a86612232565b94506020860151935060408601519250606086015191506124bd60808701612232565b90509295509295909350565b8060005b60038110156124f55781516001600160a01b03168452602093840193909101906001016124cd565b50505050565b8060005b60058110156124f55781516001600160a01b03168452602093840193909101906001016124ff565b60608101610bab82846124c9565b60c0810161254382856124c9565b606082018360005b600381101561256a57815183526020928301929091019060010161254b565b5050509392505050565b610160810161258382866124fb565b60a082018460005b60058110156125aa57815483526020909201916001918201910161258b565b505050821515610140830152949350505050565b6020808252825182820181905260009190848201906040850190845b818110156125ff5783516001600160a01b0316835292840192918401916001016125da565b50909695505050505050565b82151581526040602082015260008251806040840152612632816060850160208701612903565b601f01601f1916919091016060019392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000610140820190506126c78284516124fb565b60208084015160a0840160005b60058110156126f1578251825291830191908301906001016126d4565b5050505092915050565b85815260208101859052604081018490526001600160a01b038316606082015260a081016003831061273d57634e487b7160e01b600052602160045260246000fd5b8260808301529695505050505050565b600080821280156001600160ff1b038490038513161561276f5761276f61296a565b600160ff1b83900384128116156127885761278861296a565b50500190565b600082198211156127a1576127a161296a565b500190565b6000826127b5576127b5612980565b600160ff1b8214600019841416156127cf576127cf61296a565b500590565b6000826127e3576127e3612980565b500490565b60006001600160ff1b038184138284138082168684048611161561280e5761280e61296a565b600160ff1b8487128281168783058912161561282c5761282c61296a565b8587129250878205871284841616156128475761284761296a565b8785058712818416161561285d5761285d61296a565b505050929093029392505050565b60008160001904831182151516156128855761288561296a565b500290565b60008083128015600160ff1b8501841216156128a8576128a861296a565b6001600160ff1b03840183138116156128c3576128c361296a565b50500390565b6000828210156128db576128db61296a565b500390565b600060ff821660ff8416808210156128fa576128fa61296a565b90039392505050565b60005b8381101561291e578181015183820152602001612906565b838111156124f55750506000910152565b60006000198214156129435761294361296a565b5060010190565b600060ff821660ff8114156129615761296161296a565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212200fc6ae287c2aa13df801e92c9b752c566cb303ef473556dd1b726b7f7a95c7ae64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "cancelPool(uint256)": {
        "params": {
          "_poolId": "Unique ID of the pool to cancel"
        }
      },
      "createPool(uint256,address)": {
        "params": {
          "_entryFee": "amount of accepted tokens to be deposited by user to enter pool",
          "_token": "accepted token of the pool in terms of which the entry fee is based"
        }
      },
      "distributeRewards(uint256)": {
        "params": {
          "_poolId": "Unique ID of the pool to distribute rewards to winners"
        }
      },
      "enterPool(uint256,address[5])": {
        "params": {
          "_poolId": "Unique ID of the pool to enter",
          "_tokens": "List of token aggregator addresses"
        }
      },
      "getNetPoints(uint256,address)": {
        "params": {
          "_address": "User address of which points are to be calculated",
          "_poolId": "Unique ID of the pool"
        },
        "returns": {
          "_0": "Number of points till current time based upon their pool token selection"
        }
      },
      "getPoolEntries(uint256)": {
        "params": {
          "_poolId": "Unique ID of the pool"
        },
        "returns": {
          "_0": "List of addresses of users that entered the pool"
        }
      },
      "getPoolPosition(uint256,address)": {
        "params": {
          "_address": "User address of which position and points are to be calculated",
          "_poolId": "Unique ID of the pool"
        },
        "returns": {
          "_0": "Position and net points of the user among all the pool entries"
        }
      },
      "getPoolWinners(uint256)": {
        "params": {
          "_poolId": "Unique ID of the pool"
        },
        "returns": {
          "_0": "List of winners after pool has ended"
        }
      },
      "getUserPoolEntries(uint256,address)": {
        "params": {
          "_address": "User address of which pool entries are required",
          "_poolId": "Unique ID of the pool"
        },
        "returns": {
          "_0": "UserEntry struct which has list of tokens and their initial prices"
        }
      },
      "leaderboard(uint256)": {
        "params": {
          "_poolId": "Unique ID of the pool"
        },
        "returns": {
          "_0": "List of top `WINNER_COUNT` users and their respective points in descending order of points"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawFees(address)": {
        "params": {
          "_token": "Address of token to withdraw collected fee"
        }
      }
    },
    "title": "A betting game for users to predict top performing crypto tokens and win pool rewards",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cancelPool(uint256)": {
        "notice": "Disbales additional entries and returns the deposited tokens of users if number of entries is less than `MIN_ENTRY_COUNT`"
      },
      "checkUpkeep(bytes)": {
        "notice": "Keeper function to check if any pool needs to be cancelled or to distribute rewards"
      },
      "createPool(uint256,address)": {
        "notice": "Create a new pool for users to enter and select tokens"
      },
      "distributeRewards(uint256)": {
        "notice": "Distributes pool rewards to winners based on gains of token selection"
      },
      "enterPool(uint256,address[5])": {
        "notice": "Adds user to list of pool entries, collects entry fee, and stores the current token prices"
      },
      "getPoolPosition(uint256,address)": {
        "notice": "Calculates the position of a user in a pool based upon the gains of their selected tokens"
      },
      "performUpkeep(bytes)": {
        "notice": "Keeper function to automatically cancel pool or distribute pool rewards"
      },
      "withdrawFees(address)": {
        "notice": "Transfers the collected fee of the provided token to owner address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 72,
        "contract": "contracts/Bet5Game.sol:Bet5Game",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 180,
        "contract": "contracts/Bet5Game.sol:Bet5Game",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 915,
        "contract": "contracts/Bet5Game.sol:Bet5Game",
        "label": "POOL_ENTRY_INTERVAL",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 918,
        "contract": "contracts/Bet5Game.sol:Bet5Game",
        "label": "POOL_START_INTERVAL",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 921,
        "contract": "contracts/Bet5Game.sol:Bet5Game",
        "label": "POOL_DURATION",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 991,
        "contract": "contracts/Bet5Game.sol:Bet5Game",
        "label": "poolCounter",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 993,
        "contract": "contracts/Bet5Game.sol:Bet5Game",
        "label": "keeperPoolCounter",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 997,
        "contract": "contracts/Bet5Game.sol:Bet5Game",
        "label": "feeCollected",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1001,
        "contract": "contracts/Bet5Game.sol:Bet5Game",
        "label": "poolsEntered",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1006,
        "contract": "contracts/Bet5Game.sol:Bet5Game",
        "label": "pools",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(Pool)980_storage)"
      },
      {
        "astId": 1013,
        "contract": "contracts/Bet5Game.sol:Bet5Game",
        "label": "userPoolEntries",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserEntry)989_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)3_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_address)5_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[5]",
        "numberOfBytes": "160"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_int256)5_storage": {
        "base": "t_int256",
        "encoding": "inplace",
        "label": "int256[5]",
        "numberOfBytes": "160"
      },
      "t_enum(Status)961": {
        "encoding": "inplace",
        "label": "enum Bet5Game.Status",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(UserEntry)989_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Bet5Game.UserEntry)",
        "numberOfBytes": "32",
        "value": "t_struct(UserEntry)989_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserEntry)989_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct Bet5Game.UserEntry))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserEntry)989_storage)"
      },
      "t_mapping(t_uint256,t_struct(Pool)980_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Bet5Game.Pool)",
        "numberOfBytes": "32",
        "value": "t_struct(Pool)980_storage"
      },
      "t_struct(Pool)980_storage": {
        "encoding": "inplace",
        "label": "struct Bet5Game.Pool",
        "members": [
          {
            "astId": 963,
            "contract": "contracts/Bet5Game.sol:Bet5Game",
            "label": "startTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 965,
            "contract": "contracts/Bet5Game.sol:Bet5Game",
            "label": "endTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 967,
            "contract": "contracts/Bet5Game.sol:Bet5Game",
            "label": "entryFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 969,
            "contract": "contracts/Bet5Game.sol:Bet5Game",
            "label": "token",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 972,
            "contract": "contracts/Bet5Game.sol:Bet5Game",
            "label": "entries",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 976,
            "contract": "contracts/Bet5Game.sol:Bet5Game",
            "label": "winners",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_address)3_storage"
          },
          {
            "astId": 979,
            "contract": "contracts/Bet5Game.sol:Bet5Game",
            "label": "status",
            "offset": 0,
            "slot": "8",
            "type": "t_enum(Status)961"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(UserEntry)989_storage": {
        "encoding": "inplace",
        "label": "struct Bet5Game.UserEntry",
        "members": [
          {
            "astId": 984,
            "contract": "contracts/Bet5Game.sol:Bet5Game",
            "label": "tokens",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)5_storage"
          },
          {
            "astId": 988,
            "contract": "contracts/Bet5Game.sol:Bet5Game",
            "label": "prices",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_int256)5_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}